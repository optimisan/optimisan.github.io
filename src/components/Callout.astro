---
const { icon, type, backgroundColor, borderLeftColor } = Astro.props;
function renderIcon(icon: any) {
  if (typeof icon === "string") {
    return icon;
  } else if (typeof icon === "object" && icon.name) {
    return `<ion-icon name="${icon.name}"></ion-icon>`;
  }
  return "";
}
---

<!-- 
Using default as remix-callout package in astro.config.mjs
        note?: SingleCalloutConfig,
        tip?: SingleCalloutConfig,
        warning?: SingleCalloutConfig,
        abstract?: SingleCalloutConfig,
        info?: SingleCalloutConfig,
        todo?: SingleCalloutConfig,
        success?: SingleCalloutConfig,
        question?: SingleCalloutConfig,
        danger?: SingleCalloutConfig,
        bug?: SingleCalloutConfig,
        example?: SingleCalloutConfig,
        failure?: SingleCalloutConfig,
        quote?: SingleCalloutConfig
-->
<style>
  .callout-box {
    color: #fff;
    flex-direction: column;
    padding: 1rem;
    border-left-width: 4px;
    border-left-style: solid;
    margin: 1.5rem 0;
    border-top-right-radius: 4px;
    border-bottom-right-radius: 4px;
  }

  .callout-icon-and-type {
    font-size: 1.5rem;
    display: flex;
    gap: 0.4rem;
  }

  .icon {
    margin-right: 4rem;
  }

  .callout-content {
    font-size: 1.2rem;
  }
</style>
<aside class="callout-box" style={{ backgroundColor, borderLeftColor }}>
  <div class="callout-icon-and-type">
    <Fragment set:html={renderIcon(icon)} />
    {type}
  </div>
  <div class="callout-content">
    <slot />
  </div>
</aside>
