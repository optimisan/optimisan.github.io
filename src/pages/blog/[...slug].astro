---
import { type CollectionEntry, getCollection } from "astro:content";
import BlogPost from "../../layouts/BlogPost.astro";
import { render } from "astro:content";
import dayjs from "dayjs";
import utc from "dayjs/plugin/utc";
import type { MarkdownHeading } from "astro";

dayjs.extend(utc);

export async function getStaticPaths() {
  const posts = await getCollection("blog");
  return posts.map((post) => ({
    params: { slug: post.id },
    props: post,
  }));
}
type Props = CollectionEntry<"blog">;

const post = Astro.props;
const { Content, remarkPluginFrontmatter, headings } = await render(post);

const field = remarkPluginFrontmatter.lastModified;
const readingTime = remarkPluginFrontmatter.readingTime;
console.log(field, "field");
let lastModified = null;
if (field != "") lastModified = dayjs(field).utc().toDate();

// console.log(headings);
console.log("lastModified", lastModified);
const postData = {
  ...post.data,
  updatedDate: lastModified,
  readingTime: readingTime,
};

// function buildTOC(headings: MarkdownHeading[]) {
//   console.log("building toc");
//   // Heading = {depth: number, text: string, slug: string, subheading: [Heading]}
//   // TOC = [Heading]
//   type Heading = MarkdownHeading & { subheadings: Heading[] };
//   const toc: Heading[] = [];
//   const parentHeadings = new Map();
//   headings.forEach((h) => {
//     const heading = { ...h, subheadings: [] };
//     parentHeadings.set(heading.depth, heading);
//     if (heading.depth === 2) {
//       toc.push(heading);
//     } else {
//       parentHeadings.get(heading.depth - 1).subheadings.push(heading);
//     }
//   });
//   return toc;
// }
---

<BlogPost {...postData} headings={headings}>
  <Content />
</BlogPost>
