---
import type { CollectionEntry } from "astro:content";
import BaseHead from "../components/BaseHead.astro";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import FormattedDate from "../components/FormattedDate.astro";
import TOC from "../components/TOC.astro";
import "../styles/hero.css";

type Props = CollectionEntry<"blog">["data"];

const {
  title,
  description,
  pubDate,
  updatedDate,
  heroImage,
  readingTime,
  headings,
} = Astro.props;

const heroBackgroundImage = heroImage ?? "./wave.svg";

function formatDate(date: Date) {
  return date.toLocaleDateString("en-US", {
    year: "numeric",
    month: "long",
    day: "numeric",
  });
}
console.log(updatedDate);
const showUpdated =
  updatedDate && formatDate(updatedDate) !== formatDate(pubDate);
---

<html lang="en" data-theme="dark">
  <head>
    <BaseHead title={title} description={description} />
    <style define:vars={{ heroBackgroundImage: `"${heroBackgroundImage}"` }}>
      body {
        --left-margin: 15rem;
        --right-toc-width: 42rem;
        --content-inside-left-margin: 2rem;
      }
      @media screen and (min-width: 1700px) {
        body {
          --left-margin: 27rem;
          --right-toc-width: 60rem;
        }
      }
      @media screen and (max-width: 1500px) {
        body {
          --left-margin: 18rem;
          --right-toc-width: 45rem;
        }
      }
      @media screen and (max-width: 1280px) {
        body {
          --left-margin: 9rem;
          --right-toc-width: 45rem;
        }
      }
      @media screen and (max-width: 1000px) {
        body {
          --left-margin: 4rem;
          --right-toc-width: 40rem;
        }
      }
      @media screen and (max-width: 900px) {
        body {
          --left-margin: 2rem;
          --right-toc-width: 0;
        }
      }
      @media screen and (max-width: 500px) {
        body {
          --left-margin: 1rem;
          --right-toc-width: 0;
        }
      }
      main {
        width: calc(100% - 1.4 * var(--left-margin));
        margin-left: var(--left-margin);
        display: flex;
        @media screen and (max-width: 900px) {
          & {
            flex-direction: column;
            margin: 0;
            padding-left: 3rem;
          }
          .left-sidebar {
            display: none;
          }
        }
      }

      article {
        width: calc(100% - var(--right-toc-width));
        max-width: 800px;
        @media screen and (min-width: 1340px) {
          margin-right: clamp(80px, -6.452px + 6.452vw, 100px);
        }
        /* select direct child */
        ul,
        ol {
          list-style-type: disc;
          margin-left: 1rem;
          padding-left: 2rem;
        }
        ol {
          list-style-type: decimal;
        }
        /* > h2 {
          padding: 0;
        } */
      }

      aside.scrollspy {
        /* border: 1px solid; */
        position: sticky;
        font-family: "Fira Mono", monospace;
        top: 0;
        height: max-content;
        overflow-y: auto;
        padding-top: 3em;
        padding-left: 6rem;
        padding-right: 2rem;
        color: var(--text-muted);
        flex: 0 0 var(--right-toc-width);
      }
      .toc-wrapper {
        /* padding-right: 12rem; */
        padding: 2rem 2.4rem;
        border-radius: 1.6rem;
        max-width: 400px;
        margin-left: 5rem;
        background: var(--background-soft);
        nav {
          border: 1px solid orange;
        }
      }
      aside.scrollspy h3 {
        font-size: 1.4rem;
        color: var(--text);
        text-transform: uppercase;
      }
      a.active {
        color: green;
      }
    </style>
  </head>
  <body>
    <Header />
    <div class="hero">
      <div class="background-img">
        <img src="/slant-wave.svg" alt="" />
      </div>
      <div class="v-spacing"></div>
      <div class="hero-content">
        <h1>
          {title}
        </h1>
        <div class="info">
          <p>{description}</p>
          <div class="small">
            <p style="display: flex; align-items: center;">
              <!-- <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 -960 960 960"
                ><path d="M400-280v-400l200 200-200 200Z"></path></svg
              > -->
              <span>
                Published <em class="highlight">
                  <FormattedDate date={pubDate} />
                </em>
                {" â€¢ " + readingTime}
                {
                  showUpdated && (
                    <span class="icon-info">
                      {" "}
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        viewBox="0 -960 960 960"
                      >
                        <path d="M480-120q-75 0-140.5-28.5t-114-77q-48.5-48.5-77-114T120-480q0-75 28.5-140.5t77-114q48.5-48.5 114-77T480-840q82 0 155.5 35T760-706v-94h80v240H600v-80h110q-41-56-101-88t-129-32q-117 0-198.5 81.5T200-480q0 117 81.5 198.5T480-200q105 0 183.5-68T756-440h82q-15 137-117.5 228.5T480-120Zm112-192L440-464v-216h80v184l128 128-56 56Z" />
                      </svg>
                      Updated{" "}
                      <em class="highlight">
                        <FormattedDate date={updatedDate} />
                      </em>
                    </span>
                  )
                }
              </span>
            </p>
          </div>
        </div>
      </div>
    </div>
    <main>
      <article class="content">
        <slot />
      </article>
      <aside id="toc" class="scrollspy">
        <div class="toc-wrapper">
          <TOC toc={headings} depth={2} />
        </div>
      </aside>
    </main>
  </body>
</html>

<script>
  import scrollSpy from "simple-scrollspy";

  const options = {
    sectionClass: "h1, h2, h3, h4, h5, h6", // Query selector to your sections
    menuActiveTarget: "li > a", // Query selector to your elements that will be added `active` class
    offset: 100, // Menu item will active before scroll to a matched section 100px
    // scrollContainer: ".scroll-container", // Listen scroll behavior on `.scroll-container` instead of `window`
    onActive: (el) => {
      // Do something when a menu item is active
      console.log("onActive", el);
      el.classList.add("active");
    },
  };

  console.log("options TOC", options);

  // init:
  scrollSpy("#toc", options);
</script>

<script
  type="module"
  src="https://unpkg.com/ionicons@7.1.0/dist/ionicons/ionicons.esm.js"></script>
<script
  nomodule
  src="https://unpkg.com/ionicons@7.1.0/dist/ionicons/ionicons.js"></script>
